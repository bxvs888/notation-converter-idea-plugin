apply plugin: 'java'
apply plugin: 'idea'

ideaInstallationPath = 'C:/Program Files (x86)/JetBrains/IntelliJ IDEA Community Edition 10.5.2'
ideaJdk = 'IDEA IC-107.587'
sourceCompatibility = 1.6

idea {
    module {
        iml {
            whenMerged { module ->
                removeIdeaJdkDependencies(module)
            }
            withXml {
                def module = it.asNode()
                changeModuleType(module)
                removeUnnecessaryComponent(module)
                appendRequiredComponent(module)
                changeComponentWithNewModuleRootManager(module)
            }
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile fileTree(dir: ideaInstallationPath + '/lib', include: '*.jar')
    testCompile 'org.mockito:mockito-all:1.9.0-rc1'
}

metaInf << files('/META-INF/plugin.xml')


def removeIdeaJdkDependencies(def module) {
    module.dependencies.removeAll(module.dependencies.findAll {it.classes.url[0].contains(ideaInstallationPath)})
}

def changeModuleType(def module) {
    module.@type = 'PLUGIN_MODULE'
}

def removeUnnecessaryComponent(def module) {
    module.remove(module.component.find { it.@name == 'ModuleRootManager'})
}

def appendRequiredComponent(def module) {
    module.appendNode('component', ['name': 'DevKit.ModuleBuildProperties', 'url': 'file://$MODULE_DIR$/META-INF/plugin.xml'])
}

def changeComponentWithNewModuleRootManager(def module) {
    def componentWithNewModuleRootManager = module.component.find { it.@name == 'NewModuleRootManager'}
    componentWithNewModuleRootManager.remove(componentWithNewModuleRootManager.orderEntry.find { it.@type == 'inheritedJdk'})
    componentWithNewModuleRootManager.appendNode('orderEntry', ['type': 'jdk', 'jdkName': ideaJdk, 'jdkType': 'IDEA JDK'])
}
